worker_processes  1;

error_log  logs/error.log;
pid        logs/nginx.pid;

events {
    # Max value 16384
    worker_connections  8192;
    # Accept multiple connections
    multi_accept on;
}

# Settings that affect all server blocks
http {
    include php_processes.conf;
    include       mime.types;
    default_type  application/octet-stream;

    access_log  logs/access.log;

    sendfile on;
	
	fastcgi_connect_timeout 300;
	fastcgi_send_timeout 300;
	fastcgi_read_timeout 300;
	
    keepalive_timeout  600;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1 SSLv3;
    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AES:RSA+3DES:!ADH:!AECDH:!MD5:!DSS; 
    ssl_prefer_server_ciphers on;
    gzip  on;
    # http server

	server {
		listen 92;
		#listen [::]:92;

		root /Users/yudequan/xc/wms-backend/public;
		
		index index.php index.html index.htm index.nginx-debian.html;

		location / {
			
			index  index.htm index.html index.php;
			if (!-e $request_filename){
				rewrite ^/(.*)$ /index.php?s=$1 last;
				break;
			}
		}

		location ~ /.*\.php/ {
			rewrite ^(.*?/?)(.*\.php)(.*)$ /$2?s=$3 last;
			break;
		}

		location ~ \.php/?.*$ {
			
			root  /Users/yudequan/xc/wms-backend/public;
			# regex to split $uri to $fastcgi_script_name and $fastcgi_path
			fastcgi_split_path_info ^(.+\.php)(/.+)$;

			# Check that the PHP script exists before passing it
			try_files $fastcgi_script_name =404;

			# Bypass the fact that try_files resets $fastcgi_path_info
			# see: http://trac.nginx.org/nginx/ticket/321
			set $path_info $fastcgi_path_info;
			fastcgi_param PATH_INFO $path_info;

			fastcgi_index index.php;
			include fastcgi.conf;
			fastcgi_pass 127.0.0.1:9001;
			
	
		
			# With php-fpm (or other unix sockets):
			#fastcgi_pass unix:/var/run/php/php5.6-fpm.sock;
			#fastcgi_index  index.php;
			fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name; 
			include fastcgi_params;
			# With php-cgi (or other tcp sockets):
		}
	}
	
	server {
		listen 80;

		root /Users/yudequan/xc/wms-backend/public;
		
		index index.php index.html index.htm index.nginx-debian.html;

		server_name wmstest.qa.xianchengkeji.cn;

		location / {
			
			index  index.htm index.html index.php;
			if (!-e $request_filename){
				rewrite ^/(.*)$ /index.php?s=$1 last;
				break;
			}
		}

		location ~ /.*\.php/ {
			rewrite ^(.*?/?)(.*\.php)(.*)$ /$2?s=$3 last;
			break;
		}

		location ~ \.php/?.*$ {
			
			root  /Users/yudequan/xc/wms-backend/public;
			# regex to split $uri to $fastcgi_script_name and $fastcgi_path
			fastcgi_split_path_info ^(.+\.php)(/.+)$;

			# Check that the PHP script exists before passing it
			try_files $fastcgi_script_name =404;

			# Bypass the fact that try_files resets $fastcgi_path_info
			# see: http://trac.nginx.org/nginx/ticket/321
			set $path_info $fastcgi_path_info;
			fastcgi_param PATH_INFO $path_info;

			fastcgi_index index.php;
			include fastcgi.conf;
			fastcgi_pass 127.0.0.1:9001;
			
	
		
			# With php-fpm (or other unix sockets):
			#fastcgi_pass unix:/var/run/php/php5.6-fpm.sock;
			#fastcgi_index  index.php;
			fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name; 
			include fastcgi_params;
			# With php-cgi (or other tcp sockets):
		}
	}

	# End HTTP Server

	# Begin HTTPS Server
	server {
		listen 443 http2 ssl;
		server_name localhost;
		ssl_certificate      cert.pem;
		ssl_certificate_key  key.pem;
		ssl_session_cache   shared:SSL:10m;
		ssl_session_timeout 10m;

		## Parametrization using hostname of access and log filenames.
		access_log logs/localhost_access.log;
		error_log logs/localhost_error.log;

		## Root and index files.
		root html;
		index  index.php index.html index.htm;

		## If no favicon exists return a 204 (no content error).
		location = /favicon.ico {
			try_files $uri =204;
			log_not_found off;
			access_log off;
		}

		## Don't log robots.txt requests.
		location = /robots.txt {
			allow all;
			log_not_found off;
			access_log off;
		}
		## Try the requested URI as files before handling it to PHP.
		location / {

			## Regular PHP processing.
			location ~ \.php$ {
				try_files  $uri =404;
				fastcgi_pass   php_processes;
				fastcgi_index  index.php;
				fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
				include        fastcgi_params;
			}

			## Static files are served directly.
			location ~* \.(?:css|gif|htc|ico|js|jpe?g|png|swf)$ {
				expires max;
				log_not_found off;
				## No need to bleed constant updates. Send the all shebang in one
				## fell swoop.
				tcp_nodelay off;
				## Set the OS file cache.
				open_file_cache max=1000 inactive=120s;
				open_file_cache_valid 45s;
				open_file_cache_min_uses 2;
				open_file_cache_errors off;
			}

			## Keep a tab on the 'big' static files.
			location ~* ^.+\.(?:ogg|pdf|pptx?)$ {
				expires 30d;
				## No need to bleed constant updates. Send the all shebang in one
				## fell swoop.
				tcp_nodelay off;
			}
			} # / location
	} # End HTTPS Server
}
